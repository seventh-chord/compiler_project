
extern "kernel32.lib" {
    fn ExitProcess(exit_code: u32);
    fn GetStdHandle(key: u32) -> u64;
    fn WriteFile(file: u64, buffer: *u8, length: u32, written: *u32, overlapped: *void);
}

typedef WriteFile_Type = *fn(file: u64, buffer: *u8, length: u32, written: *u32, overlapped: *void);
let write_fn: WriteFile_Type = &WriteFile;

let stdout_handle = GetStdHandle(u32(-11));
fn print(string: String) {
    let written: u32;
    write_fn(stdout_handle, string.data, u32(string.length), &written, null);
}


typedef int = i32;

fn main() {
    bitwise_funkyness();
    boolean_funkyness();

    let n: i32 = 7;

    let other: *fn(p: i32) -> i32;
    other = &my_callback;

    n = other(n);

    n = give_us_a_function_pointer()(n);

    n = down_the_rabbit_hole()()(n);

    if n != 10 {
        print("The callback DID NOT WORK\n");
    } else {
        print("The callback did work\n");
    }

    perform();
    print_keyword();

    ExitProcess(0);
}

fn my_callback(parameter: i32) -> i32 {
    print("You just called my callback!\n");
    return parameter + 1;
}

fn give_us_a_function_pointer() -> *fn(p: i32) -> i32 {
    return &my_callback;
}

fn down_the_rabbit_hole() -> *fn() -> *fn(p: i32) -> int {
    return &give_us_a_function_pointer;
}


typedef Keyword_Factory = *fn() -> String;

fn get_keyword() -> String {
    return "...mean mean pride";
}

fn get_keyword_factory() -> Keyword_Factory {
    return &get_keyword;
}

fn print_keyword() {
    let factory = get_keyword_factory();
    let keyword = factory();

    print(keyword);
    print("\n");
}


fn bitwise_funkyness() {
    let a = 1;
    let b = 2;
    let c = 4;

    if a|b != a+b { print("Oof, bitwise is broken \n"); }
    if a&b != 0   { print("Oof, bitwise is really broken \n"); }
    if 2^3 != 1   { print("Oof, bitwise is really really broken \n"); }
}

fn boolean_funkyness() {
    let a = 7;
    if a < 8 || crash() {}
    if a < 5 && crash() { print("Short circuiting broke slightly\n"); }

    if funky_a() & funky_b() {
        print("This is wrong\n");
    }
}

fn funky_a() -> bool {
    print("I like soul, ");
    return false;
}
fn funky_b() -> bool {
    print("with a captial S\n");
    return true;
}

fn crash() -> bool {
    print("Short circuiting is not working at all\n");

    let bell: u8 = 0x07;
    print(String { &bell, 1 });

    ExitProcess(-1);
    return true;
}


fn perform() {
    let stage = Stage {};
    stage.on[Names::Dirk]  = true;
    stage.on[Names::Pratt] = true;
    stage.on[Names::Lerxt] = true;

    if stage.on[Names::Dirk] && stage.on[Names::Pratt] && stage.on[Names::Lerxt] {
        print("A modern day warrior, mean mean stride, todays Tom Sawyer...\n");
    } else {
        print("Big bummer\n");
    }
}

enum Names(i8) { Dirk, Pratt, Lerxt }

struct Stage {
    on: [enum_length(Names)]bool;
}
