
extern "kernel32.lib" {
    fn ExitProcess(exit_code: u32);
    fn GetStdHandle(key: u32) -> u64;
    fn WriteFile(file: u64, buffer: *u8, length: u32, written: *u32, overlapped: *void);
}

let stdout_handle = GetStdHandle(u32(-11));
fn print(string: str) {
    let written: u32;
    WriteFile(stdout_handle, string.data, u32(string.length), &written, null);
}

fn main() {
    print("Hello world\n");
    print_direction(Direction::NORTH);
    print_direction(Direction::SOUTH);
    print(get_direction_instruction(Direction::EAST));
    print(get_direction_instruction(cast(Direction, 7)));
    shadowing();
    array_test();
    ExitProcess(0);
}

fn print_direction(dir: Direction) {
    // NB You probably want to use 'enum_member_name(dir)' instead though
    switch dir {
        NORTH: print("North\n");
        SOUTH: print("South\n");
        EAST:  print("East\n");
        WEST:  print("West\n");
    }
}

fn get_direction_instruction(dir: Direction) -> str {
    switch dir {
        NORTH: { return "Go upwards\n"; }
        SOUTH: { return "Don't go upwards\n"; }
        WEST:  return "Go left\n";
        EAST:  return "Go right\n";
        _:     return "That's not a direction\n";
    }
}

enum Direction { NORTH; SOUTH; EAST; WEST; }

fn array_test() {
    let questionable = [][][QUESTIONABLE_OK_THANKS - 1]u32 { { { 1, 2 } }, { { 1, 2 } } };

    let info = [enum_length(Direction)]bool {
        Direction::EAST:  true,
        Direction::NORTH: true,
    };

    if info[Direction::NORTH] && info[Direction::EAST] && !info[Direction::SOUTH] && !info[Direction::WEST] {
        print("Well that means we have done the right thing\n");
    } else {
        print("Apparently something has gotten really sauced up\n");
        print("Stuff is broken!\n");
    }
}

const QUESTIONABLE_OK_THANKS = 3;

fn shadowing() {
    let x = N;
    let x = x + 1;
    if x == 4 {
        print("Everything seems to work as intended\n");
    } else {
        print("I don't feel so good, mister compiler\n");
    }

    const M = N + 1;
    const N = 3;
}
