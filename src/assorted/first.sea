
extern "kernel32.lib" {
    fn ExitProcess(exit_code: u32);

    fn GetStdHandle(key: u32) -> u64;
    fn WriteFile(file: u64, buffer: *u8, length: u32, written: *u32, overlapped: *void);

    fn GetProcessHeap() -> u64;
    fn HeapAlloc(heap: u64, flags: u32, bytes: u64) -> *void;
}

fn assert(condition: bool, error_message: String) {
    if (!condition) {
        print("Assertion failed: ");
        print(error_message);
        print("\n");
        ExitProcess(0);
    }
}

fn c_string_length(string: *u8) -> i64 {
    let length = 0;
    for (*string != 0) {
        length += 1;
        string = 1 + string;
    }
    return length;
}

fn mem_copy(src, dest: *u8, length: i64) {
    for (length > 0) {
        *dest = *src;
        src += 1;
        dest += 1;
        length -= 1;
    }
}

let stdout_handle = GetStdHandle(u32(-11));
fn print(string: String) {
    let written: u32;
    WriteFile(stdout_handle, string.data, u32(string.length), &written, null);
}

fn print_cstr(string: *u8) {
    let length = c_string_length(string);
    print(String { data: string, length: length });
}

fn print_u64(value: u64, base: u64) {
    let buffer: [30]u8;

    if (value == 0) {
        buffer[0] = 0x30; // TODO character literals
    } else {
        let i: u64 = 0;
        for (value > 0) {
            let char = u8(value % base);
            value = value / base; // TODO operator /=

            if (char <= 9) {
                buffer[i] = 0x30 + char;
            } else {
                buffer[i] = 0x61 + (char - 10);
            }
            i += 1;
        }
        i -= 1;

        let j: u64 = 0;
        for (j < i) {
            let temp = buffer[j];
            buffer[j] = buffer[i];
            buffer[i] = temp;

            i -= 1;
            j += 1;
        }
    }

    let length = c_string_length(&buffer);
    let string = String { data: &buffer, length: length };
    print(string);
}

let SEVEN = u64(u8(u64(3074504259546010887))); // evaluates to 7
let EIGHT = [3][3]u8 { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }[2][1];
let NINE = nine();
fn nine() -> u16 { return 3 * 3; }

fn main() {
    float_test(3.0, 0.1415);

    //let nasty = [3][3]u8 { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }[2][1];
    //let nasty = [3]u8 { 1, 2, 3 }[2];

    let bread_and_butter = [2]String { "bread\n", "butter\n" };
    print(bread_and_butter[0]);
    print(bread_and_butter[1]);

    assert(seventy_two() == 72, "seventy_two() == 72");

    let hi = "Hi";
    let ho = "Ho";

    let a: u8 = 10;
    for (a > 0) {
        if (a % 2 == 0) {
            print(hi);
        } else {
            print(ho);
        }

        a -= 1;
    }

    print("\n");

    if (global) { print("Dude, "); }
    sidewinder();
    if (global) { print("thats not "); }
    sidewinder();
    if (global) { print("nice\n"); }

    print_u64(16045690984503098046, 16); print("\n");
    print_u64(u64(SEVEN), 10); print(", ");
    print_u64(u64(EIGHT), 10); print(", ");
    print_u64(u64(NINE), 10); print("\n");

    test_fancy_casts();
    say_my_name();
    test_is_prime();
    foozleschmuzle();
    arena_test();
    stride_test();
    farwell(); // to kings
    vector_test();
    enum_test();

    ExitProcess(0);
}

fn sidewinder() { global = !global; }
let global = 3 > 2;

let BIG_BOY: [4][4]u64 = {
    { 0, 0, 0, 0 },
    { 0, 0, 0, 0 },
    { 0, 0, 2, 0 },
    { 0, 0, 0, 0 },
};

fn four() -> u8 {
    let empty = [4]u64 { 0, 0, 0, 0 };

    let small_boy = &empty;
    *small_boy = BIG_BOY[2];

    let nice = small_boy[2];
    let nicer = empty[2];

    return u8(nice) + u8(nicer);
}

fn swanky() -> u8 {
    let x = u8(14);
    let array = [3]u8 { 2, 1, 3 };
    array = { 0, 0, array[1] + x };
    return third(&array);
}

fn third(array: *[3]u8) -> u8 {
    let barray = *array;
    return barray[2];
}

fn scary_third(array: *u8) -> u8 {
    return *(array + 2);
}

fn remove_fifteen(p: *u8) {
    let fifteen = swanky();
    *p = *p - fifteen;
}

// Don't actually do this in real code, but you can use type names as identifier names
fn bar(u8: u8, u32: u8) -> u8 {
    let u64: u64 = 1;
    u64 = u64 + u64(1 + u8(2));
    return u8 + u32*2 + u8(u64);
}

fn foo(a: u8) -> u8 {
    let five: u8 = 20;
    remove_fifteen(&five);

    return a*five + (255 + 1);
}

fn seventy_two() -> u8 {
    let four = four();
    let x = bar(1, 0) + foo(four*3 - 3*(1 + 2));

    x = 2*(20 + 10) - x*2;

    let y = x - 2 + 3;
    let z = 2 + 3 + y;
    let w = z;
    w = 1 + w;
    return w + 45 + (255 + 1);
}

fn test_fancy_casts() {
    let text = "Yo"; 
    let foo_star = cast(*u16, text.data);
    let foo = *foo_star;

    print("0x");
    print_u64(u64(foo), 16);
    if (foo != 0x6f59) {
        print(" (Should be 0x6f59)");
    }
    print("\n");
}


enum Name_Enum { ITS_seventh_chord }
let my_name = enum_member_name(Name_Enum::ITS_seventh_chord).data + 4;

fn say_my_name() {
    print("My name is ");
    print_cstr(my_name);
    print("!\n");
}

fn test_is_prime() {
    assert(is_prime(53), "is_prime(53)");
    assert(is_prime(139), "is_prime(139)");
    assert(is_prime(367), "is_prime(367)");
    assert(!is_prime(65), "!is_prime(65)");
    assert(!is_prime(84), "!is_prime(84)");
    assert(!is_prime(33), "!is_prime(33)");
}

fn is_prime(a: u64) -> bool {
    let is_prime = true;

    let b = a - 1;
    for (b > 1) {
        if (a % b == 0) {
            is_prime = false;
            break;
        }
        b -= 1;
    }

    return is_prime;
}

fn no_escaping_mister_bones_wild_ride() -> u8 {
    return 0;
}

fn does_return_but_somewhat_sneakily() -> u8 {
    if (true) {
        return 1;
    } else {
        return 2;
    }
}


struct Foo {
    a: u32;
}

let mister_worldwide: Foo;
//let mister_worldwide = Foo { a: 1 }; // TODO next up

fn foozleschmuzle() {
    mister_worldwide.a = 7;
    print_foo(&mister_worldwide);
}

fn print_foo(foo: *Foo) {
    print("Foo { a: ");
    print_u64(u64(foo.a), 10);
    print(" }\n");
}

fn stride_test() {
    let list = [3]u64 { 1, 2, 3 };
    let pointer = cast(*u64, &list);

    print_u64(*pointer, 10);
    print(", ");
    pointer += 1;
    print_u64(*pointer, 10);
    print("\n");
}


fn farwell() {
    let pages = The_Pages_Of_History {
        seeds_that_we_let_grow:   3,
        castles_in_the_distance:  2,
    };

    assert(size_of(The_Pages_Of_History) == 24, "size_of is broken");
    assert(align_of(The_Pages_Of_History) == 8, "align_of is broken");

    turn(pages);
    print(", ");
    print_u64(pages.path_of_least_resistance, 10);
    print("\n");
}

fn turn(pages: The_Pages_Of_History) {
    pages.path_of_least_resistance = 2112;
    print_u64(pages.path_of_least_resistance, 10);
}

struct The_Pages_Of_History {
    seeds_that_we_let_grow: u64;
    castles_in_the_distance: u64;
    path_of_least_resistance: u64;
}


let X_AXIS = Vector { 1, 0, 0 };
let Y_AXIS = Vector { y: 1 };
let Z_AXIS = Vector { z: 1 };
let SIXTY_FOUR = Vector { z: 60 }.z + Vector { x: 4 }.x;

fn vector_test() {
    assert(X_AXIS.x == 1, "x bad");
    assert(Y_AXIS.y == 1, "y bad");
    assert(Z_AXIS.z == 1, "z bad");

    let vector = Vector { 1, 2, 3 };
    print_u64(u64(vector.x), 10);
    print(", ");
    print_u64(u64(vector.y), 10);
    print(", ");
    print_u64(u64(vector.z), 10);
    print("\n");

    assert(SIXTY_FOUR == 64, "Will you still need me, will you still feed me?");
}

struct Vector { x, y, z: u8; }


let DEFAULT_TYPE_KIND = cast(Type_Kind, u64(Type_Kind::U8) + 7);
let HOW_LONG_BRO = enum_length(Direction);

fn enum_test() {
    let kind = cast(Type_Kind, u64(DEFAULT_TYPE_KIND) + 1); // Hmm, this is a bit gnarly...
  
    if (kind == Type_Kind::POINTER) {
        print("Its pointy and sharp\n");
    } else {
        print("You don't know what that is\n");
    }

    print_u64(u64(kind), 10);
    print("\n");

    print("This thing has type ");
    print(enum_member_name(type_info_of_type(Type_Kind)));
    print("!\n");

    let a = 0;
    for (a < enum_length(Type_Kind)) {
        if (a > 0) { print(", "); }

        let invalid = cast(Type_Kind, a);
        print(enum_member_name(invalid));

        a += 1;
    }
    print("\n");

    let our_map = Map { Direction::SOUTH, Direction::NORTH };
    print(enum_member_name(our_map.looking));
    print(", ");
    print(enum_member_name(our_map.target));
    print("\n");

    print_u64(u64(HOW_LONG_BRO), 10);
    print("\n");

    print(enum_member_name(cast(Empty_Enum, 0)));
    print_u64(u64(enum_length(Empty_Enum)), 10);
    print("\n");
}

enum Direction (u8) { NORTH, SOUTH, EAST, WEST }
struct Map {
    looking, target: Direction;
}

enum Empty_Enum {}


fn float_test(a, b: f32) {
    let a_nice_number = a + b;
    let the_sum = 3.1415;

    let bits = *cast(*u32, &a_nice_number);
    let sum_bits = *cast(*u32, &the_sum);

    print("a_nice_number has type ");
    print(enum_member_name(type_info_of_value(a_nice_number)));
    print(" and hex value 0x");
    print_u64(u64(bits), 16);
    print(" but it should be 0x");
    print_u64(u64(sum_bits), 16);
    print("!\n");
}

fn arena_test() {
    print("Calvino inbound...\n");

    let original = "[There are two kinds of cities]: those that through the years and the changes continue to give their form to desires, and those in which desires either erase the city or are erased by it.\n";

    let arena: Arena;
    let copy = arena_new(&arena, original.length + 1);
    mem_copy(original.data, copy, original.length + 1);

    print_u64(u64(original.length), 10);
    print(" characters of Calvino\n");
    print_cstr(copy);
}


let heap = GetProcessHeap();
let ARENA_BLOCK_SIZE = 1024;

struct Arena {
    data: *u8;
    used, capacity: i64;
}

fn arena_new(arena: *Arena, size: i64) -> *u8 {
    if (arena.data == null) {
        arena.data = HeapAlloc(heap, 0, u64(ARENA_BLOCK_SIZE));
        arena.used = 0;
        arena.capacity = ARENA_BLOCK_SIZE;

        assert(arena.data != null, "Failed to alocate");
    }

    let result = arena.data + arena.used;
    arena.used += size;
    assert(arena.used <= arena.capacity, "arena.used <= arena.capacity");
    return result;
} 
