
extern "kernel32.lib" {
    fn ExitProcess(exit_code: u32);
    fn GetStdHandle(key: u32) -> u64;
    fn WriteFile(file: u64, buffer: *u8, length: u32, written: *u32, overlapped: *void);
}

let stdout_handle = GetStdHandle(-11);
fn print(string: String) {
    let written: u32;
    WriteFile(stdout_handle, string.data, u32(string.length), &written, null);
}

fn assert(condition: bool, message: String) {
    if !condition {
        print("Assertion failed: ");
        print(message);
        print("\n");
        ExitProcess(-1);
    }
}

fn main() {
    shifty_shafts();

    x64_eight_bit_register_bug();
    floating_away();
    division();
    division_take_two();
    a_raise();
    pointer_arithmetic();

    print("In Marco Polos descriptions the Kahn discovered...\n");

    let three = other(1, 2);
    let b = u32('0') + three == u32('3');
    assert(b, "Math is broken");

    wont_work_for_now();

    more_breakage_incomming();

    big_bummer();

    assert(enum_length(Type_Kind) == i64(Type_Kind::FN_POINTER) + 1, "There are not enough types!");

    print(get_second_word("This Whoa\n sentence will not be printed!"));

    who_are_you(3);

    assert(true, "This should NOT assert");
    assert(false, "This should assert");
}

fn other(a, b: u32) -> u32 {
    big_function();
    return a + b;
}

fn big_function() {
    let a: u64 = 1;
    let b: u64;

    a = 3 + 5;
    b = a;
    a = 4 + a;

    let p = &a;
    *p = a + 7;

    *p = 2 + *p;

    let big: [10]u16;
    big[0] = 0x48;
    big[1] = 0x8d;

    let big_p = &big;
    big_p[1] = 0x8d;

    big_p[b] = 0xf0;


    let matrix: [4][4]u32;

    let i = 3;
    let j = 3;
    matrix[i][j] = 1;

    let thing = Foo { 3, 2 };

    thing = Foo { a: u64(thing.b), b: u8(thing.a) };

    let thinger = &thing;
    thinger.b = 2;


    let dude: [2]Foo;
    dude[1] = thing;
}

struct Foo {
    a: u64;
    b: u8;
}


fn a() -> i64 {
    return -24;
}

fn big_a(b, c: i64) {}

fn wont_work_for_now() {
    let b = a() + a() + a();
    let c = 2 * 12 * 3;

    if b == -c {
        print("Nice\n");
    } else {
        print("Something is borked\n");
    }


    let m = 0;
    let n = &m;
    *n = a();

    let along_the_road = Another_Town { a(), a() }; 
    build(along_the_road);

    big_a(a(), a());

    let array = [3]i64 { -3, -4, -5 };
    let pointer = &array;
    c = pointer[1];
    assert(c == -4, "Hmm not good");
}

struct Another_Town { a, b: i64; }

fn build(town: Another_Town) {
    assert(town.a == town.b, "Broken? Yeah");

    town.a = 1;

    let t: Type_Kind;

    t = type_info_of_value(town);
    assert(t == Type_Kind::STRUCT, "Darn this is no good");

    t = type_info_of_type(Another_Town);
    assert(t == Type_Kind::STRUCT, "At least this works as intended");
}


fn more_breakage_incomming() {
    let capacity = Cloud { 5, 10 }.capacity;
    assert(capacity == 10, "It didn't work after all :(");

    capacity = modernize().capacity;
    assert(capacity == 20, "I really hope this doesn't assert");

    let other_cloud: Cloud;
    upgrade(&other_cloud);
    assert(other_cloud.capacity == 1, "My cloud didn't grow");
    let newer_capacity = upgrade_by_value(other_cloud).capacity;
    assert(newer_capacity == 2, "Didn't grow again, darn");
    assert(other_cloud.capacity == 1, "Still works here though");

    let new_capacity = upgrade(&other_cloud).capacity;
    assert(new_capacity == 2, "All the cloud rained away");

    assert(will_it_crash_though().a == 1, "It did crash, though!");
}

fn upgrade(cloud: *Cloud) -> *Cloud {
    cloud.capacity += 1;
    return cloud;
}

fn upgrade_by_value(cloud: Cloud) -> Cloud {
    cloud.capacity += 1;
    return cloud;
}

fn modernize() -> Cloud {
    let shiny_new_thing = Cloud { length: 10, capacity: 20 };
    return shiny_new_thing;
}

// Note that this struct is 64 bits large, and that it thus fits in a register
struct Cloud {
    length: i32;
    capacity: i32;
}

struct Bigger_Struct { a, b, c: i64; } // This won't fit in a register

fn will_it_crash_though() -> Bigger_Struct {
    return { 1, 2, 3 };
}


fn the_stage_will_collapse() -> i64 {
    let n = 9 + (9 + (9 + (9 + (9))));
    return 2;
}
fn big_bummer() {
    let a = (1 + (1 + (1 + (1 + the_stage_will_collapse()))));
    assert(a == 6, "Big bummer");

    let q = true;
    let r = false;
    if q == r { assert(false, "Bigger bummer"); }
}


fn pointer_arithmetic() {
    let array: [10]u32;
    let a = &array[0];
    let b = 9 + a;

    let distance = b - a;
    assert(distance == 9, "Hmm, thats not how division works");

    empty_structs_should_work({});
}

struct Empty {}

fn empty_structs_should_work(e: Empty) {
    let q = e;
    let r = &q;

    let n = r - r;
}


fn get_second_word(string: String) -> String {
    let result: String;

    let i = 0;
    for i < string.length {
        if string[i] == ' ' {
            if result.data == null {
                result.data = string.data + i + 1;
                result.length = 0;
            } else {
                break;
            }
        } else {
            result.length += 1;
        }
        i += 1;
    }

    return result;

}

fn a_raise() {
    let i = [3]u8 { 4, 5, 6 } [1];
    assert(i == 5,   "'i' is bad");

    let j = "WHAT??"[3];
    assert(j == 'T', "'j' is bad");

    let k = get_second_word("some random sentence")[2];
    assert(k == 'n', "'k' is bad");

    let la = [3]u32 { 4, 9, 7 };
    let lp = &la;
    let l = la[2];
    assert(l == 7, "'l' is bad");

    let m = dumb_function(lp)[1];
    assert(m == 9, "'m' is bad");
}

fn dumb_function(p: *[3]u32) -> *[3]u32 {
    return p;
}

fn division() {
    let n = 5;
    let m = 16;

    let o = m / n;
    let p = m % n;

    assert(o == 3, "Division is broken");
    assert(p == 1, "Modulus is broken");

    assert(m / n == 3, "Something here is broken");
    assert(m % n == 1, "Something here is also broken");
    assert(m * n == 80, "Something here is really broken");
}

fn who_are_you(x: u32) {
    let t = type_info_of_value(x);
    print("x is a ");
    print(enum_member_name(t));
    print(", but whoa, that is a ");
    print(enum_member_name(cast(Type_Kind, 3)));
    print(" and another ");
    print(enum_member_name(cast(Type_Kind, 30)));
    print("!\n");
}

fn floating_away() {
    let a = 4.0;
    let b = 2.0;
    let c: f32;

    c = a + b;
    c = a - b;
    c = a * b;
    c = a / b;

    c = -c;
    assert(c == -2.0, "Oops we sank");
    assert(c < -1.0, "Oops we sank again");
    assert(c > -3.0, "Oops we sank a third time");

    assert(c == --c, "Slightly funky, but come on\n");

    let x = 0.0 / 0.0;
    assert(!(x == x), "Nan nan nan nan nan nan nan nan nan nan, batman!\n");

    c = -3.0;

    {
        if c != -3.0 { assert(false, "False"); }
        if c == -2.0 { assert(false, "Pretty untrue"); }
        if c < -3.0  { assert(false, "Very false"); }
    }

    let nan = 0.0 / 0.0;
    if nan == nan { assert(false, "Nan-man"); }
    if nan != nan {} else { assert(false, "Nan-nan-man"); }

    for nan == nan {
        assert(false, "Loops are hosed");
    }

    let i = 0;
    for nan != nan {
        i += 1;
        break;
    }
    assert(i == 1, "Loops are hosed, but in a different way");

    let d = 1.0 + flow(1, 1.0, 1, 1.0) - 1.0;
    //let d = flow(1, 1.0, 1, 1.0);
    assert(d == 4.0, "Stuff, doesn't work easy, for me");

    let n = f64(-7.9);
    assert(i8(n) == -7, "\"Sailing\"");

    let r = 4.234;
    assert(r == f32(f64(r)), "Floating point casts are not working anymore");
}

fn flow(a: i8, b: f64, c: u16, d: f64) -> f64 {
    let four = f64(a) + b + f64(c) + d;
    let two: f64 = (1.0 + (1.0 + (1.0 + (1.0 + (1.0 + (1.0 + (1.0 + (1.0 + (1.0 + 1.0))))))))) / 5.0;
    return (b + four/4.0) * two;
}

fn division_take_two() {
    let n: u8 = 5;
    let m: u8 = 16;

    let o = m / n;
    let p = m % n;

    assert(o == 3, "Division is broken");
    assert(p == 1, "Modulus is broken");

    assert(m / n == 3, "Something here is broken");
    assert(m % n == 1, "Something here is also broken");
    assert(m * n == 80, "Something here is really broken");
}

fn x64_eight_bit_register_bug() {
    let a: u8 = 1 + (1 + (1 + (1 + (1 % (1 + (1 + 1))))));
    assert(a == 5, "Why is x64 such a hodgepodge?");
}

fn shifty_shafts() {
    let x = 10;
    let y = x >> 1;
    assert(y == 5, "Shifty?");

    x = -10;
    y = x >> 1;
    assert(y == -5, "Slightly shifty!");

    for i : 1..255 {
        let mul = i * 2;
        let shift = i << 1;
        assert(i << 1 == mul, "This is not a binary machine!");
        assert(i << 1 == i << 1, "This was producing register allocation errors at some point");
    }

    assert(y == -5, "Hah, we got to test scopes too!");
}
