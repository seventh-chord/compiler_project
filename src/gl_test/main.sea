
import "gl.sea";
import "core.sea";
import window "window.sea";

fn main() {
    let arena: Arena;

    window::open();
    window::set_vsync(true); // NB setting to false will make the screen flash crazily

    let shader = load_shader(vert_source, geom_source, frag_source);
    let shader_uniform_view_size = glGetUniformLocation(shader, "view_size".data);
    let shader_uniform_view_pos  = glGetUniformLocation(shader, "view_pos".data);
    let shader_uniform_offset    = glGetUniformLocation(shader, "offset".data);

    let draw_group = draw_group_init();
    let framebuffer = framebuffer_init(8, window::width, window::height);

    let detective_mesh, pipe_mesh: *Mesh;
    {
        let mesh = mesh_import(&arena, "src/gl_test/detective.mesh".data);
        for mesh != null {
            defer mesh = mesh.next_mesh;

            if string_cmp(mesh.name, "detective") {
                detective_mesh = mesh;
            } else if string_cmp(mesh.name, "pipe") {
                pipe_mesh = mesh;
            } else {
                print("Unused mesh: ");
                print(mesh.name);
                print("\n");
            }
        }
    }
    assert(!(detective_mesh == null || pipe_mesh == null), "Missing meshes");

    let detective_pos: v3;

    const MIN_VIEW_WIDTH = 10.0;
    let view_pos, view_size: v2;
    
    for !window::close_requested {
        let dt = 1.0 / 60.0;

        window::poll_events();
        if window::key_pressed(window::Key::ESCAPE) { window::close_requested = true; }

        let aspect = f32(window::width) / f32(window::height);
        if aspect > 1.0 {
            view_size = { MIN_VIEW_WIDTH*aspect, MIN_VIEW_WIDTH };
        } else {
            view_size = { MIN_VIEW_WIDTH, MIN_VIEW_WIDTH/aspect };
        }


        {
            let d: v2;
            if window::key_down(window::Key::W) { d.x -= 1.0; d.y += 1.0; }
            if window::key_down(window::Key::S) { d.x += 1.0; d.y -= 1.0; }
            if window::key_down(window::Key::A) { d.x -= 1.0; d.y -= 1.0; }
            if window::key_down(window::Key::D) { d.x += 1.0; d.y += 1.0; }
            if d.x != 0.0 || d.y != 0.0 {
                d = scale_v2(normalize_v2(d), dt * 3.0);
                detective_pos.x += d.x;
                detective_pos.y += d.y;
            }
        }

        draw_tile(&draw_group, { -1.0, -1.0, 0.0 }, Dir::Z, 1);
        draw_tile(&draw_group, {  0.0, -1.0, 0.0 }, Dir::Z, 1);
        draw_tile(&draw_group, { +1.0, -1.0, 0.0 }, Dir::Z, 1);
        draw_tile(&draw_group, { +1.0,  0.0, 0.0 }, Dir::Z, 1);
        draw_tile(&draw_group, { +1.0, +1.0, 0.0 }, Dir::Z, 1);
        draw_tile(&draw_group, {  0.0, +1.0, 0.0 }, Dir::Z, 1);
        draw_tile(&draw_group, { -1.0, +1.0, 0.0 }, Dir::Z, 1);
        draw_tile(&draw_group, { -1.0,  0.0, 0.0 }, Dir::Z, 1);
        //draw_tile(&draw_group, {  0.0,  0.0, 0.0 }, Dir::Z, 1);

        draw_tile(&draw_group, { -1.0,  1.0, 0.0 }, Dir::Y, 2);
        draw_tile(&draw_group, {  0.0,  1.0, 0.0 }, Dir::Y, 2);
        draw_tile(&draw_group, { +1.0,  1.0, 0.0 }, Dir::Y, 2);

        draw_tile(&draw_group, { -1.0, -1.0, 0.0 }, Dir::X, 2);
        draw_tile(&draw_group, { -1.0,  0.0, 0.0 }, Dir::X, 2);
        draw_tile(&draw_group, { -1.0, +1.0, 0.0 }, Dir::X, 2);


        if window::width > framebuffer.width || window::height > framebuffer.height {
            framebuffer_grow(&framebuffer, window::width, window::height);
        }
        framebuffer_bind(&framebuffer);

        glViewport(0, 0, i32(window::width), i32(window::height));
        glClearColor(0.99, 0.99, 0.87, 1.0);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        glEnable(GL_DEPTH_TEST);
        glUseProgram(shader);
        glUniform3f(shader_uniform_offset, 0.0, 0.0, 0.0);
        glUniform2f(shader_uniform_view_size, view_size.x, view_size.y);
        glUniform2f(shader_uniform_view_pos,  view_pos.x,  view_pos.y);

        draw_group_draw(&draw_group, view_size, view_pos);

        glUniform3f(shader_uniform_offset, detective_pos.x, detective_pos.y, detective_pos.z - 0.5);
        mesh_draw(detective_mesh);
        mesh_draw(pipe_mesh);


        framebuffer_blit(&framebuffer, window::width, window::height);
        window::swap_buffers();
    }

    print("Exiting!\n");
    window::close();
    exit();
}

// NB these are duplicated in vertex shader source
const ORTHO = [3]v2 {
    { sqrt(0.75), -0.5 }, // x
    { sqrt(0.75), 0.5 },  // y
    { 0.0, 1.0 },         // z
};

enum Dir(u8) { X = 0, Y = 1, Z = 2 }

let vert_source = "
    #version 330 core
    #line 106

    layout(location = 0) in vec3 in_a;
    layout(location = 1) in vec3 in_b;
    layout(location = 2) in vec3 in_c;
    layout(location = 3) in vec3 in_color;
    layout(location = 4) in int in_kind;

    out mat3 vert_pos;
    out vec3 vert_color;
    flat out int vert_kind;

    uniform vec3 offset;

    void main() {
        vert_pos = mat3(in_a + offset, in_b + offset, in_c + offset);
        vert_kind = in_kind;
        vert_color = in_color;
    }
";

let geom_source = "
    #version 330 core
    #line 127

    layout(points) in;
    layout(triangle_strip, max_vertices = 3) out;

    in mat3 vert_pos[];
    in vec3 vert_color[];
    flat in int vert_kind[];

    out vec3 color;
    out vec2 uv;
    flat out int kind;

    uniform vec2 view_size, view_pos;

    const mat3x2 ORTHO = mat3x2(
        sqrt(0.75), -0.5,
        sqrt(0.75), 0.5,
        0.0, 1.0
    );
    const vec3 DEPTH = vec3(-1.0, 1.0, -1.0);
    const float DEPTH_RANGE = 100.0;

    vec4 world_to_screen(vec3 pos) {
        vec2 flat_pos = ORTHO * pos;
        vec2 screen_pos = ((flat_pos - view_pos) / view_size) * 2.0;
        float depth = dot(DEPTH, pos)/DEPTH_RANGE;
        return vec4(screen_pos, depth, 1.0);
    }

    void main() {
        vec3 a = vert_pos[0][0];
        vec3 b = vert_pos[0][1];
        vec3 c = vert_pos[0][2];

        vec3 normal = normalize(cross(b - a, c - a));
        vec3 x = normalize(b - a);
        vec3 y = normalize(c - a);
        vec2 uva = vec2(dot(a, x), dot(a, y));
        vec2 uvb = vec2(dot(b, x), dot(b, y));
        vec2 uvc = vec2(dot(c, x), dot(c, y));

        uv = uva;
        kind = vert_kind[0];
        color = vert_color[0];
        gl_Position = world_to_screen(a);
        EmitVertex();
        uv = uvb;
        kind = vert_kind[0];
        color = vert_color[0];
        gl_Position = world_to_screen(b);
        EmitVertex();
        uv = uvc;
        kind = vert_kind[0];
        color = vert_color[0];
        gl_Position = world_to_screen(c);
        EmitVertex();
        EndPrimitive();
    }
";

let frag_source = "
    #version 330 core
    #line 187

    in vec3 color;
    in vec2 uv;
    flat in int kind;

    out vec4 out_color;

    void main() {
        if (kind == 0) {
            out_color = vec4(color, 1.0);
        } else if (kind == 1) {
            const vec2 A = vec2(0.0, 1.0);
            float a = sin(dot(uv, A) * 16.0);
            float n = smoothstep(a, 0.3, 0.50);

            out_color = vec4(0.64, 0.27, 0.17, 1.0) * (n*0.2 + 0.8);
        } else if (kind == 2) {
            const vec2 A = vec2(0.0, 1.0);
            const vec2 B = vec2(sqrt(0.75), -0.5);
            const vec2 C = vec2(sqrt(0.75), 0.5);
            float a = sin(dot(uv, A) * 17.0);
            float b = sin(dot(uv, B) * 17.0);
            float c = sin(dot(uv, C) * 17.0);
            float n = smoothstep(abs(a*b*c), 0.3, 0.4);

            out_color = vec4(0.8, 1.0, 0.6, 1.0) * (n*0.2 + 0.8);
        } else {
            out_color = vec4(1.0, 0.0, 0.0, 1.0);
        }
    }
";

const MAX_VERTICES = 32768;
const MAX_VERTICES_BYTES = MAX_VERTICES * size_of(Vertex);

struct Vertex {
    a, b, c: v3;
    r, g, b: u8;
    kind: u8;
}

fn init_vao_for_vertex() {
    let offset = 0;

    for i : u32(0)..3 {
        glEnableVertexAttribArray(i);
        glVertexAttribPointer(i, 3, GL_FLOAT, GL_FALSE, i32(size_of(Vertex)), cast(*void, offset));
        offset += size_of(v3);
    }

    glEnableVertexAttribArray(3);
    glVertexAttribPointer(3, 3, GL_UNSIGNED_BYTE, GL_TRUE, i32(size_of(Vertex)), cast(*void, offset));
    offset += 3*size_of(u8);

    glEnableVertexAttribArray(4);
    glVertexAttribIPointer(4, 1, GL_UNSIGNED_BYTE, i32(size_of(Vertex)), cast(*void, offset));
    offset += size_of(u8);
}


struct Draw_Group {
    vbo, vao: u32;
    vertex_count: i64;
    vertices: *Vertex; // TODO Make this a slice, or something of that nature, so we get ABC
}

fn draw_group_init() -> Draw_Group {
    let vertex_count = 0;
    let vertices = cast(*Vertex, alloc(MAX_VERTICES_BYTES));

    let vbo, vao: u32;
    glGenBuffers(1, &vbo);
    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glBufferData(GL_ARRAY_BUFFER, MAX_VERTICES * size_of(Vertex), null, GL_DYNAMIC_DRAW);

    glGenVertexArrays(1, &vao);
    glBindVertexArray(vao);
    init_vao_for_vertex();

    return Draw_Group { vbo, vao, vertex_count, vertices };
}

fn draw_group_draw(draw_group: *Draw_Group, view_size, view_pos: v2) {
    glBindBuffer(GL_ARRAY_BUFFER, draw_group.vbo);
    glBufferSubData(GL_ARRAY_BUFFER, 0, draw_group.vertex_count * size_of(Vertex), cast(*void, draw_group.vertices));

    glBindVertexArray(draw_group.vao);
    glDrawArrays(GL_POINTS, 0, i32(draw_group.vertex_count));

    draw_group.vertex_count = 0;
}

fn draw_tile(draw_group: *Draw_Group, pos: v3, direction: Dir, kind: u8) {
    let c: [4]v3;
    switch direction {
        X: c = {
            add_v3(pos, { -0.5, -0.5, -0.5 }),
            add_v3(pos, { -0.5, +0.5, -0.5 }),
            add_v3(pos, { -0.5, +0.5, +0.5 }),
            add_v3(pos, { -0.5, -0.5, +0.5 }),
        };

        Y: c = {
            add_v3(pos, { -0.5, +0.5, -0.5 }),
            add_v3(pos, { -0.5, +0.5, +0.5 }),
            add_v3(pos, { +0.5, +0.5, +0.5 }),
            add_v3(pos, { +0.5, +0.5, -0.5 }),
        };

        Z: c = {
            add_v3(pos, { -0.5, -0.5, -0.5 }),
            add_v3(pos, { +0.5, -0.5, -0.5 }),
            add_v3(pos, { +0.5, +0.5, -0.5 }),
            add_v3(pos, { -0.5, +0.5, -0.5 }),
        };

        _: assert(false, "Invalid direction");
    }

    let r, g, b: u8 = 0;

    let i = draw_group.vertex_count;
    draw_group.vertex_count += 2;
    assert(draw_group.vertex_count < MAX_VERTICES, "Out of space in draw group");
    *(draw_group.vertices + i + 0) = { c[0], c[1], c[2], r, g, b, kind };
    *(draw_group.vertices + i + 1) = { c[0], c[2], c[3], r, g, b, kind };
}


struct Framebuffer {
    fbo: u32;
    color_texture: u32;
    depth_buffer: u32;
    samples: i32;
    width, height: i64;
}

fn framebuffer_init(samples: i32, width, height: i64) -> Framebuffer {
    assert(width > 0 && height > 0, "Can't have zero-sized framebuffer");

    let max_samples: i32;
    glGetIntegerv(GL_MAX_SAMPLES, &max_samples);
    samples = samples < max_samples? samples : max_samples;

    let color_texture, depth_buffer, fbo: u32;

    glGenFramebuffers(1, &fbo);
    glBindFramebuffer(GL_FRAMEBUFFER, fbo);

    glGenTextures(1, &color_texture);
    glBindTexture(GL_TEXTURE_2D_MULTISAMPLE, color_texture);
    glTexImage2DMultisample(GL_TEXTURE_2D_MULTISAMPLE, samples, GL_RGBA8, i32(width), i32(height), GL_TRUE);
    glTexParameteri(color_texture, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(color_texture, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(color_texture, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(color_texture, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D_MULTISAMPLE, color_texture, 0);

    glGenRenderbuffers(1, &depth_buffer);
    glBindRenderbuffer(GL_RENDERBUFFER, depth_buffer);
    glRenderbufferStorageMultisample(GL_RENDERBUFFER, samples, GL_DEPTH_COMPONENT, i32(width), i32(height));
    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, depth_buffer);

    let status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
    if status != GL_FRAMEBUFFER_COMPLETE {
        print("Error code: ");
        print_u64(u64(status));
        print("\n");
        assert(false, "Couldn't create framebuffer");
    }

    return {
        fbo: fbo,
        color_texture: color_texture,
        depth_buffer: depth_buffer,
        samples: samples,
        width: width, height: height,
    };
}

fn framebuffer_grow(framebuffer: *Framebuffer, width, height: i64) {
    assert(width >= framebuffer.width || height >= framebuffer.height, "Unneccesary framebuffer grow!");
    if width  > framebuffer.width  { framebuffer.width  = width;  }
    if height > framebuffer.height { framebuffer.height = height; }

    glDeleteTextures(1, &framebuffer.color_texture);
    glDeleteRenderbuffers(1, &framebuffer.depth_buffer);
    glDeleteFramebuffers(1, &framebuffer.fbo);

    *framebuffer = framebuffer_init(framebuffer.samples, width, height);
}

fn framebuffer_bind(framebuffer: *Framebuffer) {
    glBindFramebuffer(GL_FRAMEBUFFER, framebuffer.fbo);
}

fn framebuffer_blit(framebuffer: *Framebuffer, width, height: i64) {
    glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 0);
    glBindFramebuffer(GL_READ_FRAMEBUFFER, framebuffer.fbo);

    let width  = i32(width);
    let height = i32(height);
    glBlitFramebuffer(
        0, 0, width, height,
        0, 0, width, height,
        GL_COLOR_BUFFER_BIT,
        GL_NEAREST,
    );
}


fn load_shader(vertex_source, geometry_source, fragment_source: String) -> u32 {
    fn compile_single(source: String, type: u32) -> u32 {
        let shader = glCreateShader(type);
        let source_length = i32(source.length);
        glShaderSource(shader, 1, &source.data, &source_length);
        glCompileShader(shader);

        let status: i32;
        glGetShaderiv(shader, GL_COMPILE_STATUS, &status);
        if status == GL_FALSE {
            let log_length: i32;
            glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &log_length);
            let log_string = String { data: alloc(i64(log_length)), length: i64(log_length) };
            glGetShaderInfoLog(shader, log_length, null, log_string.data);

            print("Error in ");
            switch type {
                GL_VERTEX_SHADER:   print("vertex");
                GL_GEOMETRY_SHADER: print("geometry");
                GL_FRAGMENT_SHADER: print("fragment");
                _:                  print("<unkown>");
            }
            print(" shader source\n");
            print(log_string);
            exit();
        }

        return shader;
    }

    let vertex   = compile_single(vertex_source, GL_VERTEX_SHADER);
    let geometry = compile_single(geometry_source, GL_GEOMETRY_SHADER);
    let fragment = compile_single(fragment_source, GL_FRAGMENT_SHADER);

    let program = glCreateProgram();
    glAttachShader(program, vertex);
    glAttachShader(program, geometry);
    glAttachShader(program, fragment);
    glLinkProgram(program);

    let status: i32;
    glGetProgramiv(program, GL_LINK_STATUS, &status);
    if status == GL_FALSE {
        let log_length: i32;
        glGetProgramiv(program, GL_INFO_LOG_LENGTH, &log_length);
        let log_string = String { data: alloc(i64(log_length)), length: i64(log_length) };
        glGetProgramInfoLog(program, log_length, null, log_string.data);

        print("Error linking shader\n");
        print(log_string);
        exit();
    }

    glDeleteShader(vertex);
    glDeleteShader(fragment);
    return program;
}


struct Mesh {
    name: String;
    vao, vbo: u32;
    vertex_count: i32;

    next_mesh: *Mesh;
}

fn mesh_draw(mesh: *Mesh) {
    glBindVertexArray(mesh.vao);
    glDrawArrays(GL_POINTS, 0, i32(mesh.vertex_count));
}

fn mesh_import(arena: *Arena, filepath: *u8) -> *Mesh {
    let file = read_entire_file(filepath);
    assert(file.error_code == 0, "Failed to load mesh: Couldn't open file");
    defer free(file.data);

    let MAGIC = "sea\nmesh";
    assert(file.length >= MAGIC.length, "Failed to load mesh: File is too small");
    let actual_magic = String { file.data, MAGIC.length };
    assert(string_cmp(MAGIC, actual_magic), "Failed to load mesh: Invalid magic value");

    let cursor = file.data + MAGIC.length;
    let cursor_length = file.length - MAGIC.length;

    let first_mesh: *Mesh;

    for cursor_length > 0 {
        assert(cursor_length > size_of(u16), "Failed to load mesh: Missing name count");
        let name_length = i64(*cast(*u16, cursor));
        cursor += size_of(u16);
        cursor_length -= size_of(u16);

        assert(cursor_length > name_length, "Failed to load mesh: Missing name data");
        let name = String { data: cursor, length: name_length };
        cursor += name_length;
        cursor_length -= name_length;

        assert(cursor_length > size_of(u16), "Failed to load mesh: Missing vertex count");
        let vertex_count = i64(*cast(*u16, cursor));
        cursor += size_of(u16);
        cursor_length -= size_of(u16);


        let vertex_bytes = size_of(Vertex) * vertex_count;
        assert(cursor_length > vertex_bytes, "Failed to load mesh: Missing vertex data");
        let vertices = cast(*Vertex, cursor);
        cursor += vertex_bytes;
        cursor_length -= vertex_bytes;

        let MAGIC = "mesh_end";
        assert(cursor_length >= MAGIC.length, "Failed to load mesh: Missing end of mesh");
        assert(string_cmp(MAGIC, String { cursor, MAGIC.length }), "Failed to load mesh: Invalid end of mesh");
        cursor += MAGIC.length;
        cursor_length -= MAGIC.length;

        let vbo, vao: u32;
        glGenBuffers(1, &vbo);
        glBindBuffer(GL_ARRAY_BUFFER, vbo);
        glBufferData(GL_ARRAY_BUFFER, vertex_bytes, vertices, GL_STATIC_DRAW);

        glGenVertexArrays(1, &vao);
        glBindVertexArray(vao);
        init_vao_for_vertex();

        let mesh: *Mesh = arena_new(arena, size_of(Mesh));
        mesh.name = arena_clone_string(arena, name);
        mesh.vbo = vbo;
        mesh.vao = vao;
        mesh.vertex_count = i32(vertex_count);

        mesh.next_mesh = first_mesh;
        first_mesh = mesh;
    }

    return first_mesh;
}


struct v2 { x, y: f32; }
struct v3 { x, y, z: f32; }

fn add_v2(a, b: v2) -> v2 {
    return { a.x + b.x, a.y + b.y };
}
fn sub_v2(a, b: v2) -> v2 {
    return { a.x - b.x, a.y - b.y };
}
fn normalize_v2(a: v2) -> v2 {
    let length = sqrt(a.x*a.x + a.y*a.y);
    return { a.x / length, a.y / length };
}
fn scale_v2(a: v2, s: f32) -> v2 {
    return { a.x * s, a.y * s };
}

fn add_v3(a, b: v3) -> v3 {
    return { a.x + b.x, a.y + b.y, a.z + b.z };
}
fn sub_v3(a, b: v3) -> v3 {
    return { a.x - b.x, a.y - b.y, a.z - b.z };
}
fn normalize_v3(a: v3) -> v3 {
    let length = sqrt(a.x*a.x + a.y*a.y + a.z*a.z);
    return { a.x / length, a.y / length, a.z / length };
}
fn scale_v3(a: v3, s: f32) -> v3 {
    return { a.x * s, a.y * s, a.z * s };
}
