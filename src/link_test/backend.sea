
extern "build/frontend.lib" {
    fn my_add(a, b: u32) -> u32;
    fn get_sixth(a, b, c, d, e, f, g, h: i32) -> i32;
}

extern "kernel32.lib" {
    fn ExitProcess(exit_code: u32);
    fn GetStdHandle(key: u32) -> u64;
    fn WriteFile(file: u64, buffer: *u8, length: u32, written: *u32, overlapped: *void);
}

let stdout_handle = GetStdHandle(u32(-11));
fn print(string: String) {
    let written: u32;
    WriteFile(stdout_handle, string.data, u32(string.length), &written, null);
}

fn c_string_length(string: *u8) -> i64 {
    let length = 0;
    for (*string != 0) {
        length += 1;
        string = 1 + string;
    }
    return length;
}

fn print_int(value: u64) {
    let buffer: [30]u8;

    if (value == 0) {
        buffer[0] = 0x30; // TODO character literals
    } else {
        let i: u64 = 0;
        for (value > 0) {
            let char = u8(value % 10);
            value = value / 10; // TODO operator /=

            if (char <= 9) {
                buffer[i] = 0x30 + char;
            } else {
                buffer[i] = 0x61 + (char - 10);
            }
            i += 1;
        }
        i -= 1;

        let j: u64 = 0;
        for (j < i) {
            let temp = buffer[j];
            buffer[j] = buffer[i];
            buffer[i] = temp;

            i -= 1;
            j += 1;
        }
    }

    let length = c_string_length(&buffer);
    let string = String { data: &buffer, length: length };
    print(string);
}

fn main() {
    let sum = my_add(9, 3);

    print_int(u64(sum));
    print(" <-- Twelve!\n");

    let six = get_sixth(1, 2, 3, 4, 5, 6, 7, 8);
    print_int(u64(six));
    print(" <-- Six!\n");

    ExitProcess(0);
}
