
extern "kernel32.lib" {
    fn ExitProcess(exit_code: u32);

    fn GetStdHandle(key: u32) -> u64;
    fn WriteFile(file: u64, buffer: *u8, length: u32, written: *u32, overlapped: *void);
}

fn main() -> u8 {
    var message_a: [3]u8 = [3]u8 { seventy_two(), 105, 10 };
    var message_b: [3]u8 = [3]u8 { 89, 111, 10 };

    var message: *u8;
    if (3*3 > 3 + 3 + 3) {
        message = &message_b;
    } else if (3 > 2) {
        message = &message_a;
    }

    {
        var written: u32 = 0;
        var handle: u64 = GetStdHandle(4294967285);
        WriteFile(handle, message, 3, &written, null);
    }

    ExitProcess(0);
}

fn four() -> u8 {
    var big_boy: [4][4]u64 = [4][4]u64 {
        [4]u64 { 0, 0, 0, 0 },
        [4]u64 { 0, 0, 0, 0 },
        [4]u64 { 0, 0, 2, 0 },
        [4]u64 { 0, 0, 0, 0 },
    };

    var empty: [4]u64 = [4]u64 { 0, 0, 0, 0 };

    var small_boy: *[4]u64 = &empty;
    *small_boy = big_boy[2];

    var nice: u64 = big_boy[2][2];
    output = u8(nice) + u8(empty[2]);
}

fn swanky() -> u8 {
    var x: u8 = 14;
    var array: [3]u8 = [3]u8 { 2, 1, 3 };
    array = [3]u8 {
        0, 0,
        array[1] + x
    };
    output = third(&array);
}

fn third(array: *[3]u8) -> u8 {
    var barray: [3]u8 = *array;
    output = barray[2];
}

fn scary_third(array: *u8) -> u8 {
    output = *(array + 2);
}

fn remove_fifteen(p: *u8) {
    var fifteen: u8 = swanky();
    *p = *p - fifteen;
}

fn bar(a: u8, b: u8) -> u8 {
    var dingus: u64 = 1;
    dingus = dingus + u64(1 + u8(2));

    output = a + b*2 + u8(dingus);
}

fn foo(a: u8) -> u8 {
    var five: u8 = 20;
    remove_fifteen(&five);

    output = a*five + (255 + 1);
}

fn seventy_two() -> u8 {
    var four: u8 = four();
    var x: u8 = bar(1, 0) + foo(four*3 - 3*(1 + 2));

    x = 2*(20 + 10) - x*2;

    var y: u8 = x - 2 + 3;
    var z: u8 = y + 2 + 3;
    var w: u8 = z;
    w = 1 + w;
    output = w + 45 + (255 + 1);
}

#   loops
#   global variables and constants (.data and .bss (?))
#   type inference
#   structs, unions, enums
#   size_of, align_of, type_of
#   more operators      <<   >>   |   &   ~   ||   &&
#   hex literals

#   .pdata so we can crash properly, or whatever that is for
#   debug info
#   growing the stack? stack guards?
#   constant evaluation / elimination
#   peephole optimizer
