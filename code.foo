
extern "kernel32.lib" {
    fn ExitProcess(exit_code: u32);

    fn GetStdHandle(key: u32) -> u64;
    fn WriteFile(file: u64, buffer: *u8, length: u32, written: *u32, overlapped: *void);
}

let SEVEN = u64(u8(u64(3074504259546010887))); // evaluates to 7
let EIGHT = [3][3]u8 { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }[2][1];

fn main() -> u8 {
    if (seventy_two() != 72) {
        ExitProcess(0);
    }

    let hi = "Hi";
    let ho = "Ho";

    let a: u8 = 10;
    for (a > 0) {
        if (a % 2 == 0) {
            print(hi);
        } else {
            print(ho);
        }

        a -= 1;
    }

    print("\n");

    if (global) { print("Dude, "); }
    sidewinder();
    if (global) { print("thats not "); }
    sidewinder();
    if (global) { print("nice\n"); }

    print_u64(16045690984503098046, 16); print("\n");
    print_u64(u64(-u32(11)), 10); print("\n");
    print_u64(u64(SEVEN), 10); print("\n");
    print_u64(u64(EIGHT), 10); print("\n");

    test_fancy_casts();

    say_my_name();

    ExitProcess(0);
}

let STDOUT_KEY = u32(-11);
let stdout_handle: u64;

fn print(string: *u8) {
    if (stdout_handle == 0) {
        stdout_handle = GetStdHandle(STDOUT_KEY);
    }

    let length: u32 = 0;
    let s = string;
    for (*s != 0) {
        s += 1;
        length += 1;
    }

    let written: u32;
    WriteFile(stdout_handle, string, length, &written, null);
}

fn print_u64(value: u64, base: u64) {
    let buffer: [30]u8;

    if (value == 0) {
        buffer[0] = 0x30; // TODO character literals
    } else {
        let i: u64 = 0;
        for (value > 0) {
            let char = u8(value % base);
            if (char <= 9) {
                buffer[i] = 0x30 + char;
            } else {
                buffer[i] = 0x61 + (char - 10);
            }
            value = value / base; // TODO operator /=
            i += 1;
        }
        i -= 1;

        let j: u64 = 0;
        for (j < i) {
            let temp = buffer[j];
            buffer[j] = buffer[i];
            buffer[i] = temp;

            i -= 1;
            j += 1;
        }
    }

    print(&buffer);
}


fn sidewinder() { global = !global; }
let global = 3 > 2;

let BIG_BOY: [4][4]u64 = {
    { 0, 0, 0, 0 },
    { 0, 0, 0, 0 },
    { 0, 0, 2, 0 },
    { 0, 0, 0, 0 },
};

fn four() -> u8 {
    let empty = [4]u64 { 0, 0, 0, 0 };

    let small_boy = &empty;
    *small_boy = BIG_BOY[2];

    let nice = small_boy[2];
    let nicer = empty[2];

    output = u8(nice) + u8(nicer);
}

fn swanky() -> u8 {
    let x = u8(14);
    let array = [3]u8 { 2, 1, 3 };
    array = { 0, 0, array[1] + x };
    output = third(&array);
}

fn third(array: *[3]u8) -> u8 {
    let barray = *array;
    output = barray[2];
}

fn scary_third(array: *u8) -> u8 {
    output = *(array + 2);
}

fn remove_fifteen(p: *u8) {
    let fifteen = swanky();
    *p = *p - fifteen;
}

fn bar(a: u8, b: u8) -> u8 {
    let dingus: u64 = 1;
    dingus = dingus + u64(1 + u8(2));

    output = a + b*2 + u8(dingus);
}

fn foo(a: u8) -> u8 {
    let five: u8 = 20;
    remove_fifteen(&five);

    output = a*five + (255 + 1);
}

fn seventy_two() -> u8 {
    let four = four();
    let x = bar(1, 0) + foo(four*3 - 3*(1 + 2));

    x = 2*(20 + 10) - x*2;

    let y = x - 2 + 3;
    let z = y + 2 + 3;
    let w = z;
    w = 1 + w;
    output = w + 45 + (255 + 1);
}

fn test_fancy_casts() {
    let text = "Yo"; 
    let foo_star = cast(*u16, text);
    let foo = *foo_star;

    print("0x");
    print_u64(u64(foo), 16); // Should be 
    if (foo != 0x6f59) {
        print(" (Should be 0x6f59)");
    }
    print("\n");
}


let my_name_a = "foo\n";
let my_name_b = "__seventh-chord\n" + 2;

fn say_my_name() {
    print(my_name_a);
    print(my_name_b);
}

/*
uninitialized (zeroed) global variables in .bss
structs, unions, enums
slices (also, make strings slices)
size_of, align_of, type_of
more operators      <<   >>   |   &   ~   ||   &&    /=    *=
character literals
variable shadowing

.pdata and unwind info
debug info
growing the stack? __chkstk
constant evaluation / elimination
register allocation
peephole optimizer
some form of compile-time execution
*/
