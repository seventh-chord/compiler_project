
extern "kernel32.lib" {
    fn ExitProcess(exit_code: u32);

    fn GetStdHandle(key: u32) -> u64;
    fn WriteFile(file: u64, buffer: *u8, length: u32, written: *u32, overlapped: *void);
}

fn main() -> u8 {
    let hi = "_i\n";
    let ho = "Ho\n";

    *(hi + 0) = seventy_two(); # NB: This is not that nice, as strings are stored in .data

    {
        let written: u32 = 0;
        let handle: u64 = GetStdHandle(4294967285);

        let a: u8 = 10;
        for (a > 0) {
            if (a % 2 == 0) { # Who needs a modulus operator anyways?
                WriteFile(handle, hi, 2, &written, null);
            } else {
                WriteFile(handle, ho, 2, &written, null);
            }

            a = a - 1;
        }

        WriteFile(handle, hi + 2, 1, &written, null);
    }

    ExitProcess(0);
}

fn four() -> u8 {
    let big_boy: [4][4]u64 = {
        { 0, 0, 0, 0 },
        { 0, 0, 0, 0 },
        { 0, 0, 2, 0 },
        { 0, 0, 0, 0 },
    };

    let empty = [4]u64 { 0, 0, 0, 0 };

    let small_boy = &empty;
    *small_boy = big_boy[2];

    let nice = big_boy[2][2];
    output = u8(nice) + u8(empty[2]);
}

fn swanky() -> u8 {
    let x = u8(14);
    let array = [3]u8 { 2, 1, 3 };
    array = { 0, 0, array[1] + x };
    output = third(&array);
}

fn third(array: *[3]u8) -> u8 {
    let barray = *array;
    output = barray[2];
}

fn scary_third(array: *u8) -> u8 {
    output = *(array + 2);
}

fn remove_fifteen(p: *u8) {
    let fifteen = swanky();
    *p = *p - fifteen;
}

fn bar(a: u8, b: u8) -> u8 {
    let dingus: u64 = 1;
    dingus = dingus + u64(1 + u8(2));

    output = a + b*2 + u8(dingus);
}

fn foo(a: u8) -> u8 {
    let five: u8 = 20;
    remove_fifteen(&five);

    output = a*five + (255 + 1);
}

fn seventy_two() -> u8 {
    let four = four();
    let x = bar(1, 0) + foo(four*3 - 3*(1 + 2));

    x = 2*(20 + 10) - x*2;

    let y = x - 2 + 3;
    let z = y + 2 + 3;
    let w = z;
    w = 1 + w;
    output = w + 45 + (255 + 1);
}

#   global variables and constants (.data and .bss (?))
#   type inference
#   slices
#   structs, unions, enums
#   size_of, align_of, type_of
#   more operators      <<   >>   |   &   ~   ||   &&
#   hex literals

#   .pdata so we can crash properly, or whatever that is for
#   debug info
#   growing the stack? stack guards?
#   constant evaluation / elimination
#   peephole optimizer
